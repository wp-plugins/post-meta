
if( !class_exists( 'pmProInitModel' ) ) :
class pmProInitModel {
    


      
     
    function loadControllers(){
        global $postMeta;
        $controllersOrder = $postMeta->controllersOrder();
        
        $postMeta->isPro = true;  // manually
                                         
        $classes = array();
        foreach( scandir( $postMeta->controllersPath ) as $file ) {
            if( preg_match( "/.php$/i" , $file ) )
                $classes[ str_replace( ".php", "", $file ) ] = $postMeta->controllersPath . $file;            
        }          
        
        if( @$postMeta->isPro){
            $proDir = $postMeta->controllersPath . 'pro/';
            if( file_exists( $proDir ) ){
                foreach( scandir( $proDir ) as $file ) {
                    if( preg_match( "/.php$/i" , $file ) )
                        $classes[ str_replace( ".php", "", $file ) ] = $proDir . $file; 
                }                  
            }          
        }       
               
        foreach( $classes as $className => $classPath ){
            require_once( $classPath );
            if( !in_array( $className, $controllersOrder ) )
                $controllersOrder[] = $className;
        }
                          
        foreach( $controllersOrder as $className ){
            if( class_exists( $className ) )
                $instance[] = new $className;
        }
              
        return $instance;        
    }
    
    
    function render( $viewName, $parameter = array(), $subdir=null ){
        global $postMeta;        
        
        $subdir = $subdir ? "$subdir/" : null;
        if( @$postMeta->isPro AND self::isPro() AND file_exists( $postMeta->viewsPath . "pro/$subdir" . $viewName . '.php' ) )
            $viewPath = $postMeta->viewsPath . "pro/$subdir" . $viewName . '.php';
        else{
            $viewPath = $postMeta->viewsPath . $subdir . $viewName . '.php';
            if( !file_exists( $viewPath ) ) return;
        }
        
        if( $parameter ) extract($parameter);            
        $pageReturn = include $viewPath;
        if( $pageReturn AND $pageReturn <> 1 )
            return $pageReturn;
        if( @$html ) return $html;        
    } 
    
    function isPro(){
        if(class_exists('postMetaPro')){
            return true;
        }else{
            return false;
        }
    }
    
}
endif;